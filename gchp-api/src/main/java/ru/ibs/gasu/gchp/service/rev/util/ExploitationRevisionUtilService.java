package ru.ibs.gasu.gchp.service.rev.util;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.ibs.gasu.dictionaries.domain.*;
import ru.ibs.gasu.dictionaries.service.DictionaryDataService;
import ru.ibs.gasu.gchp.domain.ProjectDetailsRevision;
import ru.ibs.gasu.gchp.entities.*;
import ru.ibs.gasu.gchp.entities.ExploitationInvestmentIndicator;
import ru.ibs.gasu.gchp.entities.ExploitationInvestmentRecoveryIndicator;
import ru.ibs.gasu.gchp.entities.ExploitationInvestments;
import ru.ibs.gasu.gchp.entities.ExploitationInvestmentsRecovery;

import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;

import static ru.ibs.gasu.gchp.domain.ProjectField.*;
import static ru.ibs.gasu.gchp.domain.ProjectDetailsRevision.SIMPLE_DATE_FORMAT;


@Service
public class ExploitationRevisionUtilService {
    @Autowired
    private DictionaryDataService dictionaryDataService;

    public String getIRSource(Project project) {
        if (project.getExIRSource() != null) {
            return dictionaryDataService.getAllIRSources()
                    .stream()
                    .filter(form -> form.getId().equals(project.getExIRSource()))
                    .map(IRSourceEntity::getName)
                    .collect(Collectors.joining(", "));
        }
        return "";
    }

    public String getTmCompositionOfCompensationGrantorFault(Project project) {
        if (project.getTmCompositionOfCompensationGrantorFault() != null) {
            return dictionaryDataService.getAllTmCompositionOfCompensationGrantorFault()
                    .stream()
                    .filter(form -> form.getId().equals(project.getTmCompositionOfCompensationGrantorFault()))
                    .map(TmCompositionOfCompensationGrantorFaultEntity::getName)
                    .collect(Collectors.joining(", "));
        }
        return "";
    }

    public String getIRLevel(Project project) {
        if (project.getExIRLevel() != null) {
            return dictionaryDataService.getAllIRLevels()
                    .stream()
                    .filter(form -> form.getId().equals(project.getExIRLevel()))
                    .map(IRLevelEntity::getName)
                    .collect(Collectors.joining(", "));
        }
        return "";
    }

    /*////
        public String getMethodOfExecOfPublicPartnerObligation(ProjectDetailsSimple project) {
            if (project.getExMethodOfExecOfPublicPartnerObligation() != null) {
                return dictionaryDataService.getAllMethodOfExecuteObligations()
                        .stream()
                        .filter(form -> form.getId().equals(project.getExMethodOfExecOfPublicPartnerObligation()))
                        .map(MethodOfExecuteObligationEntity::getName)
                        .collect(Collectors.joining(", "));
            }
            return "";
        }
    */
    public String getPaymentForm(Project project) {
        if (project.getExPaymentForm() != null) {
            return dictionaryDataService.getAllPaymentMethods()
                    .stream()
                    .filter(form -> form.getId().equals(project.getExPaymentForm()))
                    .map(PaymentMethodEntity::getName)
                    .collect(Collectors.joining(", "));
        }
        return "";
    }

    public Optional<ProjectDetailsRevision> createInvestmentAmountRevision(Project prevProject, Project currProject, String userName) {
        ProjectDetailsRevision revision = null;

        checkExistValuesInvestmentAmount(prevProject);
        checkExistValuesInvestmentAmount(currProject);
        if (!Objects.equals(prevProject.getExInvestmentExploitationAmount(), currProject.getExInvestmentExploitationAmount())) {
            revision = new ProjectDetailsRevision();
            revision.setEditedField(EX_INVESTMENT_EXPLOITATION_AMOUNT);

            revision.setEditor(userName);
            revision.setDate(currProject.getUpdateDate());

            revision.setPrevValue(getInvestmentExploitationAmount(prevProject));
            revision.setCurrentValue(getInvestmentExploitationAmount(currProject));
        }
        return Optional.ofNullable(revision);
    }

    private void checkExistValuesInvestmentAmount(Project project) {
        boolean hasValue = false;

        ExploitationInvestments amount = project.getExInvestmentExploitationAmount();
        if (amount != null && amount.getIndicators() != null && !amount.getIndicators().isEmpty()) {
            for (ExploitationInvestmentIndicator indicator : amount.getIndicators()) {
                if (indicator.getPlan() != null || indicator.getFact() != null || !indicator.getValuesByYears().isEmpty()) {
                    hasValue = true;
                    break;
                }
            }

            if (!hasValue) {
                project.setExInvestmentExploitationAmount(null);
            }
        }
    }

    public Optional<ProjectDetailsRevision> createInvestmentRecoveryAmountRevision(Project prevProject, Project currProject, String userName) {
        ProjectDetailsRevision revision = null;

        checkExistValuesInvestmentRecoveryAmount(prevProject);
        checkExistValuesInvestmentRecoveryAmount(currProject);
        if (!Objects.equals(prevProject.getExInvestmentExploitationRecoveryAmount(), currProject.getExInvestmentExploitationRecoveryAmount())) {
            revision = new ProjectDetailsRevision();
            revision.setEditedField(EX_INVESTMENT_EXPLOITATION_RECOVERY_AMOUNT);

            revision.setEditor(userName);
            revision.setDate(currProject.getUpdateDate());

            revision.setPrevValue(getInvestmentExploitationRecoveryAmount(prevProject));
            revision.setCurrentValue(getInvestmentExploitationRecoveryAmount(currProject));
        }
        return Optional.ofNullable(revision);
    }

    private void checkExistValuesInvestmentRecoveryAmount(Project project) {
        boolean hasValue = false;

        ExploitationInvestmentsRecovery amount = project.getExInvestmentExploitationRecoveryAmount();
        if (amount != null && amount.getIndicators() != null && !amount.getIndicators().isEmpty()) {
            for (ExploitationInvestmentRecoveryIndicator indicator : amount.getIndicators()) {
                if (indicator.getPlan() != null || indicator.getFact() != null || !indicator.getValuesByYears().isEmpty()) {
                    hasValue = true;
                    break;
                }
            }

            if (!hasValue) {
                project.setExInvestmentExploitationRecoveryAmount(null);
            }
        }
    }

    public Optional<ProjectDetailsRevision> createPaymentRevision(Project prevProject, Project currProject, String userName) {
        ProjectDetailsRevision revision = null;

        checkExistValuesPayment(prevProject);
        checkExistValuesPayment(currProject);
        if (!Objects.equals(prevProject.getExPayment(), currProject.getExPayment())) {
            revision = new ProjectDetailsRevision();
            revision.setEditedField(EX_PAYMENT);

            revision.setEditor(userName);
            revision.setDate(currProject.getUpdateDate());

            revision.setPrevValue(getPayment(prevProject));
            revision.setCurrentValue(getPayment(currProject));
        }
        return Optional.ofNullable(revision);
    }

    private void checkExistValuesPayment(Project project) {
        boolean hasValue = false;

        ExploitationPayment payment = project.getExPayment();
        if (payment != null) {
            if (payment.getPlan() != null || payment.getFact() != null || !payment.getValuesByYears().isEmpty()) {
                hasValue = true;
            }

            if (!hasValue) {
                project.setExPayment(null);
            }
        }
    }

    public Optional<ProjectDetailsRevision> createCompensationRevision(Project prevProject, Project currProject, String userName) {
        ProjectDetailsRevision revision = null;

        checkExistValuesCompensation(prevProject);
        checkExistValuesCompensation(currProject);
        if (!Objects.equals(prevProject.getExCompensation(), currProject.getExCompensation())) {
            revision = new ProjectDetailsRevision();
            revision.setEditedField(EX_COMPENSATION);

            revision.setEditor(userName);
            revision.setDate(currProject.getUpdateDate());

            revision.setPrevValue(getCompensation(prevProject));
            revision.setCurrentValue(getCompensation(currProject));
        }
        return Optional.ofNullable(revision);
    }

    private void checkExistValuesCompensation(Project project) {
        boolean hasValue = false;

        ExploitationCompensation compensation = project.getExCompensation();
        if (compensation != null) {
            if (compensation.getPlan() != null || compensation.getFact() != null || !compensation.getValuesByYears().isEmpty()) {
                hasValue = true;
            }

            if (!hasValue) {
                project.setExCompensation(null);
            }
        }
    }

    private String getInvestmentExploitationAmount(Project project) {
        ExploitationInvestments amount = project.getExInvestmentExploitationAmount();
        if (amount != null && amount.getIndicators() != null && !amount.getIndicators().isEmpty()) {
            String commonInfo = "<div>" +
                    "<span> Включая НДС: " + (amount.getIncludeNds() != null ? amount.getIncludeNds() ? "Да" : "Нет" : "") + "<span><br>" +
                    "<span> Способ измерения измерения: " + (amount.getMeasureType() != null && amount.getMeasureType().getName() != null ? amount.getMeasureType().getName() : "") + "<span>" +
                    (amount.getOnDate() == null
                            ? ""
                            : "<br><span> На дату: " + SIMPLE_DATE_FORMAT.format(amount.getOnDate()) + "<span>") +
                    "</div>";
            String indicatorsTable = "";
            String header = "    <table style='float:left; border-style:solid; border-width: 1'>" +
                    "               <tr>" +
                    "                   <th>Показатель/Год</th>" +
                    "                   <th>План</th>" +
                    "                   <th>Факт</th>" +
                    "               </tr>";

            String body = amount.getIndicators().stream().map(indicator -> {
                        String indicatorRow = "<tr>" +
                                "            <td>" +
                                (indicator.getType() != null && indicator.getType().getName() != null ? indicator.getType().getName() : "") +
                                "            </td>" +
                                "            <td>" +
                                (indicator.getPlan() != null ? indicator.getPlan() : "") +
                                "            </td>" +
                                "            <td>" +
                                (indicator.getFact() != null ? indicator.getFact() : "") +
                                "            </td>" +
                                "        </tr>";

                        if (indicator.getValuesByYears() == null) {
                            return indicatorRow;
                        }
                        StringBuilder stringBuilder = new StringBuilder(indicatorRow);
                        indicator.getValuesByYears().forEach(yearValue -> {
                            stringBuilder.append("<tr>" +
                                    "            <td>" +
                                    yearValue.getYear() +
                                    "            </td>" +
                                    "            <td>" +
                                    (yearValue.getPlan() != null ? yearValue.getPlan() : "") +
                                    "            </td>" +
                                    "            <td>" +
                                    (yearValue.getFact() != null ? yearValue.getFact() : "") +
                                    "            </td>" +
                                    "        </tr>");
                        });
                        return stringBuilder.toString();
                    }
            ).collect(Collectors.joining(""));
            indicatorsTable = header + body + "</table>";
            return commonInfo + indicatorsTable;
        }
        return "";
    }

    private String getInvestmentExploitationRecoveryAmount(Project project) {
        ExploitationInvestmentsRecovery amount = project.getExInvestmentExploitationRecoveryAmount();
        if (amount != null && amount.getIndicators() != null && !amount.getIndicators().isEmpty()) {
            String commonInfo = "<div>" +
                    "<span> Включая НДС: " + (amount.getIncludeNds() != null ? amount.getIncludeNds() ? "Да" : "Нет" : "") + "<span><br>" +
                    "<span> Способ измерения измерения: " + (amount.getMeasureType() != null && amount.getMeasureType().getName() != null ? amount.getMeasureType().getName() : "") + "<span>" +
                    (amount.getOnDate() == null
                            ? ""
                            : "<br><span> На дату: " + SIMPLE_DATE_FORMAT.format(amount.getOnDate()) + "<span>") +
                    "</div>";
            String indicatorsTable = "";
            String header = "    <table style='float:left; border-style:solid; border-width: 1'>" +
                    "               <tr>" +
                    "                   <th>Показатель/Год</th>" +
                    "                   <th>План</th>" +
                    "                   <th>Факт</th>" +
                    "               </tr>";

            String body = amount.getIndicators().stream().map(indicator -> {
                        String indicatorRow = "<tr>" +
                                "            <td>" +
                                (indicator.getType() != null && indicator.getType().getName() != null ? indicator.getType().getName() : "") +
                                "            </td>" +
                                "            <td>" +
                                (indicator.getPlan() != null ? indicator.getPlan() : "") +
                                "            </td>" +
                                "            <td>" +
                                (indicator.getFact() != null ? indicator.getFact() : "") +
                                "            </td>" +
                                "        </tr>";

                        if (indicator.getValuesByYears() == null) {
                            return indicatorRow;
                        }
                        StringBuilder stringBuilder = new StringBuilder(indicatorRow);
                        indicator.getValuesByYears().forEach(yearValue -> {
                            stringBuilder.append("<tr>" +
                                    "            <td>" +
                                    yearValue.getYear() +
                                    "            </td>" +
                                    "            <td>" +
                                    (yearValue.getPlan() != null ? yearValue.getPlan() : "") +
                                    "            </td>" +
                                    "            <td>" +
                                    (yearValue.getFact() != null ? yearValue.getFact() : "") +
                                    "            </td>" +
                                    "        </tr>");
                        });
                        return stringBuilder.toString();
                    }
            ).collect(Collectors.joining(""));
            indicatorsTable = header + body + "</table>";
            return commonInfo + indicatorsTable;
        }
        return "";
    }

    private String getPayment(Project project) {
        ExploitationPayment amount = project.getExPayment();
        if (amount != null) {
            String header = "    <table style='float:left; border-style:solid; border-width: 1'>" +
                    "               <tr>" +
                    "                   <th>Показатель/Год</th>" +
                    "                   <th>План</th>" +
                    "                   <th>Факт</th>" +
                    "               </tr>";

            String indicatorRow = "<tr>" +
                    "            <td>" +
                    "   Всего" +
                    "            </td>" +
                    "            <td>" +
                    (amount.getPlan() != null ? amount.getPlan() : "") +
                    "            </td>" +
                    "            <td>" +
                    (amount.getFact() != null ? amount.getFact() : "") +
                    "            </td>" +
                    "        </tr>";

            if (amount.getValuesByYears() != null && !amount.getValuesByYears().isEmpty()) {
                StringBuilder stringBuilder = new StringBuilder();
                amount.getValuesByYears().forEach(yearValue -> {
                    stringBuilder.append("<tr>" +
                            "            <td>" +
                            yearValue.getYear() +
                            "            </td>" +
                            "            <td>" +
                            (yearValue.getPlan() != null ? yearValue.getPlan() : "") +
                            "            </td>" +
                            "            <td>" +
                            (yearValue.getFact() != null ? yearValue.getFact() : "") +
                            "            </td>" +
                            "        </tr>");
                });
                indicatorRow = indicatorRow + stringBuilder;
            }
            return header + indicatorRow + "</table>";
        }
        return "";
    }

    private String getCompensation(Project project) {
        ExploitationCompensation compensation = project.getExCompensation();

        if (compensation != null) {
            String commonInfo = "<div>" +
                    "<span> Включая НДС: " + (compensation.getIncludeNds() != null ? compensation.getIncludeNds() ? "Да" : "Нет" : "") + "<span><br>" +
                    "<span> Способ измерения: " + (compensation.getMeasureType() != null && compensation.getMeasureType().getName() != null ? compensation.getMeasureType().getName() : "") + "<span>" +
                    (compensation.getOnDate() == null
                            ? ""
                            : "<br><span> На дату: " + SIMPLE_DATE_FORMAT.format(compensation.getOnDate()) + "<span>") +
                    "</div>";
            String indicatorsTable = "";
            String header = "    <table style='float:left; border-style:solid; border-width: 1'>" +
                    "               <tr>" +
                    "                   <th>Показатель/Год</th>" +
                    "                   <th>План</th>" +
                    "                   <th>Факт</th>" +
                    "               </tr>";

            String indicatorRow = "<tr>" +
                    "            <td>" +
                    "   Всего" +
                    "            </td>" +
                    "            <td>" +
                    (compensation.getPlan() != null ? compensation.getPlan() : "") +
                    "            </td>" +
                    "            <td>" +
                    (compensation.getFact() != null ? compensation.getFact() : "") +
                    "            </td>" +
                    "        </tr>";

            if (compensation.getValuesByYears() != null && !compensation.getValuesByYears().isEmpty()) {
                StringBuilder stringBuilder = new StringBuilder();
                compensation.getValuesByYears().forEach(yearValue -> {
                    stringBuilder.append("<tr>" +
                            "            <td>" +
                            yearValue.getYear() +
                            "            </td>" +
                            "            <td>" +
                            (yearValue.getPlan() != null ? yearValue.getPlan() : "") +
                            "            </td>" +
                            "            <td>" +
                            (yearValue.getFact() != null ? yearValue.getFact() : "") +
                            "            </td>" +
                            "        </tr>");
                });
                indicatorRow = indicatorRow + stringBuilder;
            }
            indicatorsTable = header + indicatorRow + "</table>";
            return commonInfo + indicatorsTable;
        }
        return "";
    }

    public Optional<ProjectDetailsRevision> createEnsureMethodsRevision(Project prevProject, Project currProject, String userName) {
        ProjectDetailsRevision revision = null;
        if (!Objects.equals(prevProject.getExEnsureMethods(), currProject.getExEnsureMethods())) {
            revision = new ProjectDetailsRevision();
            revision.setEditedField(EX_ENSURE_METHODS);

            revision.setEditor(userName);
            revision.setDate(currProject.getUpdateDate());

            revision.setPrevValue(getEnsureMethods(prevProject));
            revision.setCurrentValue(getEnsureMethods(currProject));
        }
        return Optional.ofNullable(revision);
    }

    private String getEnsureMethods(Project project) {
        if (project.getExEnsureMethods() != null && !project.getExEnsureMethods().isEmpty()) {
            String header = "    <table style='float:left; border-style:solid; border-width: 1'>" +
                    "               <tr>" +
                    "                   <th>Способ обеспечения обязательств частного партнера</th>" +
                    "                   <th>Тип риска / форма обеспечения</th>" +
                    "                   <th>Срок обеспечения</th>" +
                    "                   <th>Размер обеспечения</th>" +
                    "                   <th>Планируемая дата представления</th>" +
                    "               </tr>";

            String body = project.getExEnsureMethods().stream().map(method -> {
                        String indicatorRow = "<tr>" +
                                "            <td>" +
                                getEnsureMethod(method.getEnsureMethodId()) +
                                "            </td>" +
                                "            <td>" +
                                (method.getRiskType() != null ? method.getRiskType() : "") +
                                "            </td>" +
                                "            <td>" +
                                (method.getTerm() != null ? method.getTerm() : "") +
                                "            </td>" +
                                "            <td>" +
                                (method.getValue() != null ? method.getValue() : "") +
                                "            </td>" +
                                "            <td>" +
                                (method.getSubmissionDate() != null ? method.getSubmissionDate() : "") +
                                "            </td>" +
                                "        </tr>";

                        return indicatorRow;
                    }
            ).collect(Collectors.joining(""));
            return header + body + "</table>";
        }
        return "";
    }

    private String getEnsureMethod(Long id) {
        return dictionaryDataService.getAllEnsureMethods()
                .stream()
                .filter(form -> form.getId().equals(id.toString()))
                .map(EnsureMethod::getName)
                .collect(Collectors.joining(", "));
    }

    public Optional<ProjectDetailsRevision> createBankGuaranteeByYearsRevision(Project prevProject, Project currProject, String userName) {
        ProjectDetailsRevision revision = null;
        checkExistBankGuarantee(prevProject);
        checkExistBankGuarantee(currProject);
        if (!Objects.equals(prevProject.getExBankGuaranteeByYears(), currProject.getExBankGuaranteeByYears())) {
            revision = new ProjectDetailsRevision();
            revision.setEditedField(EX_BANK_GUARANTEE_BY_YEARS);

            revision.setEditor(userName);
            revision.setDate(currProject.getUpdateDate());

            revision.setPrevValue(getBankGuaranteeByYears(prevProject));
            revision.setCurrentValue(getBankGuaranteeByYears(currProject));
        }
        return Optional.ofNullable(revision);
    }

    private void checkExistBankGuarantee(Project project) {
        boolean hasValue = false;

        ExBankGuarantee bankGuarantee = project.getExBankGuaranteeByYears();
        if (bankGuarantee != null) {
            if (/*bankGuarantee.getPlan() != null ||*/bankGuarantee.getFact() != null || !bankGuarantee.getValuesByYears().isEmpty()) {
                hasValue = true;
            }

            if (!hasValue) {
                project.setExBankGuaranteeByYears(null);
            }
        }
    }

    private String getBankGuaranteeByYears(Project project) {
        ExBankGuarantee bankGuarantee = project.getExBankGuaranteeByYears();

        if (bankGuarantee != null) {
            String indicatorsTable = "";
            String header = "    <table style='float:left; border-style:solid; border-width: 1'>" +
                    "               <tr>" +
                    "                   <th>Размер банковской гарантии по годам, тыс.руб.</th>" +
                    "                   <th>Значение</th>" +
                    "               </tr>";

            String indicatorRow = "<tr>" +
                    "            <td>" +
                    "   Всего" +
                    "            </td>" +
                    "            <td>" +
                    (bankGuarantee.getFact() != null ? bankGuarantee.getFact() : "") +
                    "            </td>" +
                    "        </tr>";

            if (bankGuarantee.getValuesByYears() != null && !bankGuarantee.getValuesByYears().isEmpty()) {
                StringBuilder stringBuilder = new StringBuilder();
                bankGuarantee.getValuesByYears().forEach(yearValue -> {
                    stringBuilder.append("<tr>" +
                            "            <td>" +
                            yearValue.getYear() +
                            "            </td>" +
                            "            <td>" +
                            (yearValue.getFact() != null ? yearValue.getFact() : "") +
                            "            </td>" +
                            "        </tr>");
                });
                indicatorRow = indicatorRow + stringBuilder;
            }
            indicatorsTable = header + indicatorRow + "</table>";
            return indicatorsTable;
        }
        return "";
    }
}
