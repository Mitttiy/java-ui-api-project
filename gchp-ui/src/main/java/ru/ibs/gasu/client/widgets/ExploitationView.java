package ru.ibs.gasu.client.widgets;

import com.google.gwt.core.client.GWT;
import com.google.gwt.event.logical.shared.ValueChangeEvent;
import com.google.gwt.event.logical.shared.ValueChangeHandler;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.IsWidget;
import com.google.gwt.user.client.ui.Widget;
import com.sencha.gxt.core.client.util.Margins;
import com.sencha.gxt.core.client.util.Padding;
import com.sencha.gxt.widget.core.client.ContentPanel;
import com.sencha.gxt.widget.core.client.container.AccordionLayoutContainer;
import com.sencha.gxt.widget.core.client.container.HorizontalLayoutContainer;
import com.sencha.gxt.widget.core.client.container.MarginData;
import com.sencha.gxt.widget.core.client.container.VerticalLayoutContainer;
import com.sencha.gxt.widget.core.client.form.*;
import com.sencha.gxt.widget.core.client.form.validator.MaxLengthValidator;
import ru.ibs.gasu.client.widgets.componens.DateFieldFullDate;
import ru.ibs.gasu.client.widgets.componens.FileUploader;
import ru.ibs.gasu.client.widgets.multiselectcombobox.MultiSelectComboBox;
import ru.ibs.gasu.common.models.SimpleIdNameModel;

import java.util.*;

import static com.sencha.gxt.cell.core.client.form.TextAreaInputCell.Resizable.VERTICAL;
import static ru.ibs.gasu.client.widgets.WidgetUtils.*;

public class ExploitationView implements IsWidget {
    Map<String, Map<Map<String, Object>, List<Long>>> attrHideMap = new HashMap<>();

    private VerticalLayoutContainer container;
    private DateField lastObjectPlanDate;
    private DateField lastObjectFactDate;
    private FileUploader lastObjectActFileUpload;
    private ExploitationInvestmentsWidget investments;
    private FileUploader investmentVolumeStagOfExploitationFileUpload;
    private CheckBox isInvestmentRecoveryProvided;
    private ExploitationInvestmentsRecoveryWidget investmentsRecovery;
    private FileUploader financialModelFileUpload;
    private ComboBox<SimpleIdNameModel> irSource;
    private ComboBox<SimpleIdNameModel> irBudgetLevel;
    private CheckBox isObligationExecutingOnOperationPhase;

    private BankGuaranteeWidget bankGuaranteeByYears;

    private ExMethodsOfExecuteObligationsView compensMethodOfExecuteObligation;
    private CheckBox isConcessionPaymentProvided;
    private ComboBox<SimpleIdNameModel> paymentMethod;
    private MultiSelectComboBox<SimpleIdNameModel> costRecoveryMethod;
    private ExploitationPaymentsWidget payments;

    private CheckBox isRenewableBankGuarantee;
    private CheckBox isGuaranteeVariesByYear;


    private VerticalLayoutContainer paymentsContainer;

    private BigDecimalField exPublicShareExpl;
    private CheckBox exHasPublicShareExpl;
    private FileUploader exFinModelFVIds;
    private TextArea exCostRecoveryMechanism;
    private FileUploader exSupportDocFVIds;
    private ExploitationCompensationsWidget compensations;
    private FileUploader exSupportCompensDocFVIds;

    private DateField exOwnPrivatePlanDate;
    private DateField exOwnPrivateFactDate;
    private DateField exOwnPublicPlanDate;
    private DateField exOwnPublicFactDate;
    private FileUploader exAgreementFVIds;
    private FileUploader exAcceptActFVIds;
    private DateField exStartAchEconPlanDate;
    private DateField exEndAchEconPlanDate;
    private DateField exStartAchEconFactDate;
    private DateField exEndAchEconFactDate;
    private FileUploader exAcceptActAAMFVIds;
    private DateField exInvestStagePlanDate;
    private DateField exInvestStageFactDate;
    private CheckBox exFormulasOrIndexingOrderEstablished;
    private FileUploader exCalculationPlannedAmountFVIds;
    private VerticalLayoutContainer exCalculationPlannedAmountFVIdsContainer;
    private TextField exGrantorExpenses;
    private VerticalLayoutContainer lastObjectDateContainer;
    private FieldLabel lastObjectPlanDateLabel;
    private FieldLabel lastObjectFactDateLabel;


    HorizontalLayoutContainer lastObjectRow;
    FieldLabel exPublicShareExplLabel;
    FieldLabel irSourceLabel;
    FieldLabel irBudgetLevelLabel;
    FieldLabel costRecoveryMethodLabel;
    FieldLabel exCostRecoveryMechanismLabel;
    FieldLabel paymentMethodLabel;
    FieldLabel exGrantorExpensesLabel;
    HorizontalLayoutContainer exOwnPrivateDateRow;
    HorizontalLayoutContainer exOwnPublicDateRow;
    HorizontalLayoutContainer exAchEconPlanDateRow;
    HorizontalLayoutContainer exAchEconFactDateRow;
    HorizontalLayoutContainer exInvestStageDateRow;

    public ContentPanel getCp8() {
        return cp8;
    }

    private ContentPanel cp8;

    public ContentPanel getCp2() {
        return cp2;
    }

    private ContentPanel cp2;

    public ContentPanel getCp7() {
        return cp7;
    }

    private ContentPanel cp7;

    public ContentPanel getCp3() {
        return cp3;
    }

    private ContentPanel cp3;

    public VerticalLayoutContainer getContainer() {
        return container;
    }

    public DateField getLastObjectPlanDate() {
        return lastObjectPlanDate;
    }

    public DateField getLastObjectFactDate() {
        return lastObjectFactDate;
    }

    public FileUploader getLastObjectActFileUpload() {
        return lastObjectActFileUpload;
    }

    public ExploitationInvestmentsWidget getInvestments() {
        return investments;
    }


    public FileUploader getInvestmentVolumeStagOfExploitationFileUpload() {
        return investmentVolumeStagOfExploitationFileUpload;
    }

    public CheckBox getIsInvestmentRecoveryProvided() {
        return isInvestmentRecoveryProvided;
    }

    public ExploitationInvestmentsRecoveryWidget getInvestmentsRecovery() {
        return investmentsRecovery;
    }

    public FileUploader getFinancialModelFileUpload() {
        return financialModelFileUpload;
    }

    public ComboBox<SimpleIdNameModel> getIrSource() {
        return irSource;
    }

    public ComboBox<SimpleIdNameModel> getIrBudgetLevel() {
        return irBudgetLevel;
    }

    public CheckBox getIsObligationExecutingOnOperationPhase() {
        return isObligationExecutingOnOperationPhase;
    }

    public ExMethodsOfExecuteObligationsView getCompensMethodOfExecuteObligation() {
        return compensMethodOfExecuteObligation;
    }

    public CheckBox getIsConcessionPaymentProvided() {
        return isConcessionPaymentProvided;
    }

    public ComboBox<SimpleIdNameModel> getPaymentMethod() {
        return paymentMethod;
    }

    public MultiSelectComboBox<SimpleIdNameModel> getCostRecoveryMethod() {
        return costRecoveryMethod;
    }

    public ExploitationPaymentsWidget getPayments() {
        return payments;
    }

    public CheckBox getIsRenewableBankGuarantee() {
        return isRenewableBankGuarantee;
    }

    public CheckBox getIsGuaranteeVariesByYear() {
        return isGuaranteeVariesByYear;
    }


    public BigDecimalField getExPublicShareExpl() {
        return exPublicShareExpl;
    }

    public CheckBox getExHasPublicShareExpl() {
        return exHasPublicShareExpl;
    }

    public FileUploader getExFinModelFVIds() {
        return exFinModelFVIds;
    }

    public TextArea getExCostRecoveryMechanism() {
        return exCostRecoveryMechanism;
    }

    public FileUploader getExSupportDocFVIds() {
        return exSupportDocFVIds;
    }

    public ExploitationCompensationsWidget getCompensations() {
        return compensations;
    }

    public FileUploader getExSupportCompensDocFVIds() {
        return exSupportCompensDocFVIds;
    }

    public DateField getExOwnPrivatePlanDate() {
        return exOwnPrivatePlanDate;
    }

    public DateField getExOwnPrivateFactDate() {
        return exOwnPrivateFactDate;
    }

    public DateField getExOwnPublicPlanDate() {
        return exOwnPublicPlanDate;
    }

    public DateField getExOwnPublicFactDate() {
        return exOwnPublicFactDate;
    }

    public FileUploader getExAgreementFVIds() {
        return exAgreementFVIds;
    }

    public FileUploader getExAcceptActFVIds() {
        return exAcceptActFVIds;
    }

    public DateField getExStartAchEconPlanDate() {
        return exStartAchEconPlanDate;
    }

    public DateField getExEndAchEconPlanDate() {
        return exEndAchEconPlanDate;
    }

    public DateField getExStartAchEconFactDate() {
        return exStartAchEconFactDate;
    }

    public DateField getExEndAchEconFactDate() {
        return exEndAchEconFactDate;
    }

    public FileUploader getExAcceptActAAMFVIds() {
        return exAcceptActAAMFVIds;
    }

    public DateField getExInvestStagePlanDate() {
        return exInvestStagePlanDate;
    }

    public DateField getExInvestStageFactDate() {
        return exInvestStageFactDate;
    }

    public TextField getExGrantorExpenses() {
        return exGrantorExpenses;
    }

    public CheckBox getExFormulasOrIndexingOrderEstablished() {
        return exFormulasOrIndexingOrderEstablished;
    }

    public FileUploader getExCalculationPlannedAmountFVIds() {
        return exCalculationPlannedAmountFVIds;
    }

    public BankGuaranteeWidget getBankGuaranteeByYears() {
        return bankGuaranteeByYears;
    }

    public ExploitationView() {
        initWidget(null, null);
        fillAttrHideMap();
    }

    public VerticalLayoutContainer getLastObjectDateContainer() {
        return lastObjectDateContainer;
    }

    private void initWidget(Long formId, Long initId) {
        container = new VerticalLayoutContainer();

        if (formId == null && initId == null) {
            lastObjectPlanDate = new DateFieldFullDate();
            lastObjectPlanDateLabel = createFieldLabelTop(lastObjectPlanDate, "план");
            lastObjectPlanDate.disable();
            lastObjectFactDate = new DateFieldFullDate();
            lastObjectFactDateLabel = createFieldLabelTop(lastObjectFactDate, "Фактическая дата завершения реконструкции/ввода в эксплуатацию объекта соглашения (последнего объекта соглашения)");

            lastObjectRow = createTwoFieldWidgetsRow(lastObjectPlanDateLabel, lastObjectFactDateLabel);

            lastObjectActFileUpload = new FileUploader();

            exPublicShareExpl = new BigDecimalField();
            exPublicShareExplLabel = createFieldLabelTop(exPublicShareExpl, "Доля публичной стороны в капитале совместного юридического лица (совместного предприятия), реализующего проект, после ввода объекта в эксплуатацию");
            exHasPublicShareExpl = new CheckBox();
            exHasPublicShareExpl.setBoxLabel(wrapString("Долей в совместном предприятии, реализующем проект, прямо/косвенно владеет Российская Федерация"));
            exFinModelFVIds = new FileUploader();
            exFinModelFVIds.setHeadingText("Финансовая модель");
            costRecoveryMethod = createCommonFilterModelMultiSelectComboBox("Способ возмещения расходов арендатора");
            costRecoveryMethodLabel = createFieldLabelTop(costRecoveryMethod, "Способ возмещения расходов арендатора");
            exCostRecoveryMechanism = new TextArea();
            exCostRecoveryMechanism.setResizable(VERTICAL);
//            exCostRecoveryMechanism.setHeight(100);
            exCostRecoveryMechanismLabel = createFieldLabelTop(exCostRecoveryMechanism, "Описание механизма возмещения расходов");
            exSupportDocFVIds = new FileUploader();
            exSupportDocFVIds.setHeadingText("Обосновывающие документы");
            exSupportCompensDocFVIds = new FileUploader();
            exSupportCompensDocFVIds.setHeadingText("Обосновывающие документы (возмещение расходов)");

            investments = new ExploitationInvestmentsWidget();

            investmentVolumeStagOfExploitationFileUpload = new FileUploader();
            investmentVolumeStagOfExploitationFileUpload.setHeadingText("Обосновывающие документы");


            isInvestmentRecoveryProvided = new CheckBox();
            isInvestmentRecoveryProvided.setBoxLabel(wrapString("Cоглашением предусмотрено возмещение частных инвестиций на этапе эксплуатации"));

            investmentsRecovery = new ExploitationInvestmentsRecoveryWidget();
            financialModelFileUpload = new FileUploader();
            financialModelFileUpload.setHeadingText("Основание (финансовая модель)");
            irSource = createCommonFilterModelComboBox("Выберите источник возмещения");
            irSourceLabel = createFieldLabelTop(irSource, "Источник возмещения частных инвестиций на этапе эксплуатации");

            irBudgetLevel = createCommonFilterModelComboBox("Выберите уровень бюджета");
            irBudgetLevelLabel = createFieldLabelTop(irBudgetLevel, "Уровень бюджета для возмещения");

            isObligationExecutingOnOperationPhase = new CheckBox();
            isObligationExecutingOnOperationPhase.setBoxLabel(wrapString("Обеспечение исполнения обязательств на этапе эксплуатации"));

            bankGuaranteeByYears = new BankGuaranteeWidget();

            compensMethodOfExecuteObligation = new ExMethodsOfExecuteObligationsView();

            isRenewableBankGuarantee = new CheckBox();
            isRenewableBankGuarantee.setBoxLabel(wrapString("Возобновляемая банковская гарантия"));


            isGuaranteeVariesByYear = new CheckBox();
            isGuaranteeVariesByYear.setBoxLabel(wrapString("Размер банковской гарантии изменяется по годам"));

            isConcessionPaymentProvided = new CheckBox();
            isConcessionPaymentProvided.setBoxLabel("Соглашением предусмотрена концессионная плата/ плата частного партнера");
            isConcessionPaymentProvided.getElement().setPadding(new Padding(10, 0, 0, 0));

            paymentMethod = createCommonFilterModelComboBox("Выберите форму взимания платы");
            paymentMethodLabel = createFieldLabelTop(paymentMethod, "Форма взимания платы");

            payments = new ExploitationPaymentsWidget();
            compensations = new ExploitationCompensationsWidget();


            exOwnPrivatePlanDate = new DateFieldFullDate();
            FieldLabel exOwnPrivatePlanDateLabel = createFieldLabelTop(exOwnPrivatePlanDate, "план");
            exOwnPrivateFactDate = new DateFieldFullDate();
            FieldLabel exOwnPrivateFactDateLabel = createFieldLabelTop(exOwnPrivateFactDate, "факт");
            exOwnPrivateDateRow = createTwoFieldWidgetsRow(exOwnPrivatePlanDateLabel, exOwnPrivateFactDateLabel);
            exOwnPublicPlanDate = new DateFieldFullDate();
            FieldLabel exOwnPublicPlanDateLabel = createFieldLabelTop(exOwnPublicPlanDate, "план");
            exOwnPublicFactDate = new DateFieldFullDate();
            FieldLabel exOwnPublicFactDateLabel = createFieldLabelTop(exOwnPublicFactDate, "факт");
            exOwnPublicDateRow = createTwoFieldWidgetsRow(exOwnPublicPlanDateLabel, exOwnPublicFactDateLabel);
            exAgreementFVIds = new FileUploader();
            exAgreementFVIds.setHeadingText("Пункт соглашения");
            exAcceptActFVIds = new FileUploader();
            exAcceptActFVIds.setHeadingText("Акт приема-передачи");
            exStartAchEconPlanDate = new DateFieldFullDate();
            FieldLabel exStartAchEconPlanDateLabel = createFieldLabelTop(exStartAchEconPlanDate, "Начальный срок достижения экономии, план");
            exEndAchEconPlanDate = new DateFieldFullDate();
            FieldLabel exEndAchEconPlanDateLabel = createFieldLabelTop(exEndAchEconPlanDate, "Конечный срок достижения экономии, план");
            exAchEconPlanDateRow = createTwoFieldWidgetsRow(exStartAchEconPlanDateLabel, exEndAchEconPlanDateLabel);
            exStartAchEconFactDate = new DateFieldFullDate();
            FieldLabel exStartAchEconFactDateLabel = createFieldLabelTop(exStartAchEconFactDate, "Начальный срок достижения экономии, факт");
            exEndAchEconFactDate = new DateFieldFullDate();
            FieldLabel exEndAchEconFactDateLabel = createFieldLabelTop(exEndAchEconFactDate, "Конечный срок достижения экономии, факт");
            exAchEconFactDateRow = createTwoFieldWidgetsRow(exStartAchEconFactDateLabel, exEndAchEconFactDateLabel);
            exAcceptActAAMFVIds = new FileUploader();
            exAcceptActAAMFVIds.setHeadingText("Акт о приемке ЭЭМ");
            exInvestStagePlanDate = new DateFieldFullDate();
            FieldLabel exInvestStagePlanDateLabel = createFieldLabelTop(exInvestStagePlanDate, "план");
            exInvestStageFactDate = new DateFieldFullDate();
            FieldLabel exInvestStageFactDateLabel = createFieldLabelTop(exInvestStageFactDate, "факт");
            exInvestStageDateRow = createTwoFieldWidgetsRow(exInvestStagePlanDateLabel, exInvestStageFactDateLabel);

            exFormulasOrIndexingOrderEstablished = new CheckBox();
            exFormulasOrIndexingOrderEstablished.setBoxLabel(new SafeHtmlBuilder().appendHtmlConstant("Установлены формулы или порядок индексации размера расходов концедента (публичного партнера) на стадии эксплуатации " +
                    "<i class='fa fa-info-circle' aria-hidden='true' style='cursor: pointer'" +
                    "title='Наличие в соглашении условий, предусматривающих индексацию размера бюджетных расходов на этапе создания (например, на размер инфляции)'></i>").toSafeHtml());
            exFormulasOrIndexingOrderEstablished.addValueChangeHandler(event -> {
                if (event.getValue() != null && event.getValue()) {
                    exCalculationPlannedAmountFVIdsContainer.show();
                    container.forceLayout();
                } else {
                    exCalculationPlannedAmountFVIdsContainer.hide();
                }
            });
            exCalculationPlannedAmountFVIds = new FileUploader();
            exCalculationPlannedAmountFVIds.setHeadingText(new SafeHtmlBuilder().appendHtmlConstant("Расчет планового размера расходов концедента (публичного партнера) на стадии эксплуатации  " +
                    "<i class='fa fa-info-circle' aria-hidden='true' style='cursor: pointer'" +
                    "title='Файл с расчетом планового размера бюджетных расходов на этапе создания с учетом индексации (по годам, если применимо)'></i>").toSafeHtml());

            exCalculationPlannedAmountFVIdsContainer = new VerticalLayoutContainer();
            exCalculationPlannedAmountFVIdsContainer.add(exCalculationPlannedAmountFVIds);

            exGrantorExpenses = new TextField();
            exGrantorExpenses.setName("Пункт соглашения, в котором устанавливаются расходы концедента (публичного партнера) на стадии эксплуатации");
            exGrantorExpenses.addValidator(new MaxLengthValidator(255));
            exGrantorExpensesLabel = createFieldLabelTop(exGrantorExpenses, "Пункт соглашения, в котором устанавливаются расходы концедента (публичного партнера) на стадии эксплуатации");
        }

        AccordionLayoutContainer.AccordionLayoutAppearance appearance = GWT.create(AccordionLayoutContainer.AccordionLayoutAppearance.class);
        MarginData cpMargin = new MarginData(10, 10, 10, 20);

        ContentPanel cp1 = new ContentPanel(appearance);
        cp1.setAnimCollapse(false);
        cp1.setHeading("Общая информация");
        lastObjectDateContainer = new VerticalLayoutContainer();
//        lastObjectDateContainer.add(createHtml("Дата ввода последнего объекта в эксплуатацию"));
        lastObjectDateContainer.add(lastObjectPlanDateLabel, HEIGHT60_VC_LAYOUT);
        lastObjectDateContainer.add(lastObjectFactDateLabel, HEIGHT60_VC_LAYOUT);
//        lastObjectDateContainer.add(investments, STD_VC_LAYOUT);
        lastObjectDateContainer.add(lastObjectActFileUpload, STD_VC_LAYOUT);

//        if (showControl("exPublicShareExpl", formId, initId)) {
//            lastObjectDateContainer.add(exPublicShareExplLabel, STD_VC_LAYOUT);
//        } else {
//            exPublicShareExpl.setValue(null);
//        }

//        if (showControl("exHasPublicShareExpl", formId, initId)) {
//            lastObjectDateContainer.add(exHasPublicShareExpl, STD_VC_LAYOUT);
//        } else {
//            exHasPublicShareExpl.setValue(null);
//        }
        lastObjectDateContainer.add(new HTMLPanel("<br>"), STD_VC_LAYOUT);
        if (showControl("investments", formId, initId)) {
//            lastObjectDateContainer.add(createHtml("Объем инвестиций на стадии эксплуатации"));
//            lastObjectDateContainer.add(investments, STD_VC_LAYOUT);
//            lastObjectDateContainer.add(investmentVolumeStagOfExploitationFileUpload, STD_VC_LAYOUT);
        } else {
//            investments = new ExploitationInvestmentsWidget();
            investmentVolumeStagOfExploitationFileUpload.setFiles(new ArrayList<>());
        }
        cp1.add(lastObjectDateContainer, cpMargin);

        cp2 = new ContentPanel(appearance);
        cp2.setAnimCollapse(false);
        cp2.setHeading("Возмещение частных инвестиций на этапе эксплуатации");
        VerticalLayoutContainer cp2V = new VerticalLayoutContainer();

        boolean cp2Show = false;

//        if (showControl("isInvestmentRecoveryProvided", formId, initId)) {
//            cp2V.add(isInvestmentRecoveryProvided, new VerticalLayoutContainer.VerticalLayoutData(1, -1, new Margins(0, 0, 10, 0)));
//            cp2Show = true;
//        } else {
//            isInvestmentRecoveryProvided.setValue(null);
//        }

//        if (showControl("investmentsRecovery", formId, initId)) {
//            cp2V.add(investmentsRecovery, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            investmentsRecovery = new ExploitationInvestmentsRecoveryWidget();
//        }

//        if (showControl("exFinModelFVIds", formId, initId)) {
//            cp2V.add(exFinModelFVIds, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            exFinModelFVIds.setFiles(new ArrayList<>());
//        }

        if (showControl("irSource", formId, initId)) {
            cp2V.add(irSourceLabel, new VerticalLayoutContainer.VerticalLayoutData(1, -1, new Margins(0, 0, 0, 0)));
            cp2Show = true;
        } else {
            irSource.setValue(null);
        }

//        if (showControl("irBudgetLevel", formId, initId)) {
//            cp2V.add(irBudgetLevelLabel, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            irBudgetLevel.setValue(null);
//        }

//        if (showControl("costRecoveryMethod", formId, initId)) {
//            cp2V.add(costRecoveryMethodLabel, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            costRecoveryMethod.deselectAll();
//        }

//        if (showControl("exCostRecoveryMechanism", formId, initId)) {
//            cp2V.add(exCostRecoveryMechanismLabel, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            exCostRecoveryMechanism.clear();
//        }

//        if (showControl("exSupportDocFVIds", formId, initId)) {
//            cp2V.add(exSupportDocFVIds, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            exSupportDocFVIds.setFiles(new ArrayList<>());
//        }

//        if (showControl("compensations", formId, initId)) {
//            cp2V.add(compensations, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            compensations = new ExploitationCompensationsWidget();
//        }

//        if (showControl("exSupportCompensDocFVIds", formId, initId)) {
//            cp2V.add(exSupportCompensDocFVIds, STD_VC_LAYOUT);
//            cp2Show = true;
//        } else {
//            exSupportCompensDocFVIds.setFiles(new ArrayList<>());
//        }

        cp2V.add(new HTMLPanel("<br>"), STD_VC_LAYOUT);
        cp2.add(cp2V, cpMargin);

        cp3 = new ContentPanel(appearance);
        cp3.setAnimCollapse(false);
        cp3.setHeading("Концессионная плата/ Плата частного партнера");
        VerticalLayoutContainer cp3V = new VerticalLayoutContainer();

        boolean cp3Show = false;

        if (showControl("isConcessionPaymentProvided", formId, initId)) {
            cp3V.add(isConcessionPaymentProvided, STD_VC_LAYOUT);
            cp3Show = true;
        } else {
            isConcessionPaymentProvided.setValue(null);
        }

        if (showControl("paymentMethod", formId, initId)) {
            cp3V.add(paymentMethodLabel, new VerticalLayoutContainer.VerticalLayoutData(1, -1, new Margins(0, 0, 10, 0)));
            cp3Show = true;
        } else {
            paymentMethod.setValue(null);
        }

        if (showControl("payments", formId, initId)) {
            cp3V.add(payments, STD_VC_LAYOUT);
            cp3Show = true;
        } else {
            payments = new ExploitationPaymentsWidget();
        }

        payments.getTreeGrid().addViewReadyHandler(viewReadyEvent -> {
            if (isConcessionPaymentProvided.getValue() != null && isConcessionPaymentProvided.getValue())
                cp3.expand();
        });

        cp3.add(cp3V, cpMargin);

        ContentPanel cp4 = new ContentPanel(appearance);
        cp4.setAnimCollapse(false);
        cp4.setHeading("Срок инвестиционной стадии");
        VerticalLayoutContainer cp4V = new VerticalLayoutContainer();

        boolean cp4Show = false;

//        if (showControl("exInvestStageDateRow", formId, initId)) {
//            cp4V.add(exInvestStageDateRow, HEIGHT60_VC_LAYOUT);
//            cp4Show = true;
//        } else {
//            exInvestStagePlanDate.setValue(null);
//            exInvestStageFactDate.setValue(null);
//        }
        cp4.add(cp4V, cpMargin);


        ContentPanel cp5 = new ContentPanel(appearance);
        cp5.setAnimCollapse(false);
        cp5.setHeading("Сроки достижения экономии");
        VerticalLayoutContainer cp5V = new VerticalLayoutContainer();

        boolean cp5Show = false;

//        if (showControl("exAchEconPlanDateRow", formId, initId)) {
//            cp5V.add(exAchEconPlanDateRow, HEIGHT60_VC_LAYOUT);
//            cp5Show = true;
//        } else {
//            exStartAchEconPlanDate.setValue(null);
//            exEndAchEconPlanDate.setValue(null);
//        }

//        if (showControl("exAchEconFactDateRow", formId, initId)) {
//            cp5V.add(exAchEconFactDateRow, HEIGHT60_VC_LAYOUT);
//            cp5Show = true;
//        } else {
//            exStartAchEconFactDate.setValue(null);
//            exEndAchEconFactDate.setValue(null);
//        }
//
//        if (showControl("exAcceptActAAMFVIds", formId, initId)) {
//            cp5V.add(exAcceptActAAMFVIds, STD_VC_LAYOUT);
//            cp5Show = true;
//        } else {
//            exAcceptActAAMFVIds.setFiles(new ArrayList<>());
//        }
        cp5.add(cp5V, cpMargin);


        ContentPanel cp6 = new ContentPanel(appearance);
        cp6.setAnimCollapse(false);
        cp6.setHeading("Передача объекта соглашения");
        VerticalLayoutContainer cp6V = new VerticalLayoutContainer();

        boolean cp6Show = false;

//        if (showControl("exOwnPrivateDateRow", formId, initId)) {
//            cp6V.add(createHtml("Дата возникновения права собственности у частной стороны"));
//            cp6V.add(exOwnPrivateDateRow, HEIGHT60_VC_LAYOUT);
//            cp6Show = true;
//        } else {
//            exOwnPrivatePlanDate.setValue(null);
//            exOwnPrivateFactDate.setValue(null);
//        }

//        if (showControl("exOwnPublicDateRow", formId, initId)) {
//            cp6V.add(createHtml("Дата возникновения права собственности у публичной стороны"));
//            cp6V.add(exOwnPublicDateRow, HEIGHT60_VC_LAYOUT);
//            cp6Show = true;
//        } else {
//            exOwnPublicPlanDate.setValue(null);
//            exOwnPublicFactDate.setValue(null);
//        }

//        if (showControl("exAgreementFVIds", formId, initId)) {
//            cp6V.add(exAgreementFVIds, STD_VC_LAYOUT);
//            cp6Show = true;
//        } else {
//            exAgreementFVIds.setFiles(new ArrayList<>());
//        }

//        if (showControl("exAcceptActFVIds", formId, initId)) {
//            cp6V.add(exAcceptActFVIds, STD_VC_LAYOUT);
//            cp6Show = true;
//        } else {
//            exAcceptActFVIds.setFiles(new ArrayList<>());
//        }
        cp6.add(cp6V, cpMargin);


        cp7 = new ContentPanel(appearance);
        cp7.setAnimCollapse(false);
        cp7.setHeading("Обеспечение");
        VerticalLayoutContainer cp7V = new VerticalLayoutContainer();

        boolean cp7Show = false;

        if (showControl("isObligationExecutingOnOperationPhase", formId, initId)) {
            cp7V.add(isObligationExecutingOnOperationPhase, STD_VC_LAYOUT);
            cp7Show = true;
        } else {
            isObligationExecutingOnOperationPhase.setValue(null);
        }

        if (showControl("compensMethodOfExecuteObligation", formId, initId)) {
            cp7V.add(compensMethodOfExecuteObligation, STD_VC_LAYOUT);
            cp7V.add(WidgetUtils.createVerticalGap(20));
            cp7Show = true;
        } else {
            compensMethodOfExecuteObligation.getGrid().getStore().clear();
            compensMethodOfExecuteObligation.getGrid().getView().refresh(false);
        }

        if (showControl("isRenewableBankGuarantee", formId, initId)) {
            cp7V.add(isRenewableBankGuarantee, STD_VC_LAYOUT);
            cp7Show = true;
        } else {
            isRenewableBankGuarantee.setValue(null);
        }

        if (showControl("isGuaranteeVariesByYear", formId, initId)) {
            cp7V.add(isGuaranteeVariesByYear, STD_VC_LAYOUT);
            cp7Show = true;
        } else {
            isGuaranteeVariesByYear.setValue(null);
        }

        if (showControl("bankGuaranteeByYears", formId, initId)) {
            cp7V.add(bankGuaranteeByYears, STD_VC_LAYOUT);
            cp7Show = true;
        } else {
            bankGuaranteeByYears.getTreeStore().clear();
            bankGuaranteeByYears.setUpBaseIndicators();
        }
        cp7.add(cp7V, cpMargin);

        cp7V.forceLayout();


        boolean cp8Show = true;
        cp8 = new ContentPanelWithHint(appearance);
        cp8.setAnimCollapse(false);
        cp8.setHeading(new SafeHtmlBuilder().appendHtmlConstant("Объем бюджетных расходов на стадии эксплуатации " +
                "<i class='fa fa-info-circle' aria-hidden='true' style='cursor: pointer'" +
                "title='Финансовые показатели указываются в тысячах рублей.'></i>").toSafeHtml());

        VerticalLayoutContainer cp8V = new VerticalLayoutContainer();
        cp8V.add(investments, STD_VC_LAYOUT);
        cp8V.add(exGrantorExpensesLabel, STD_VC_LAYOUT);
        cp8V.add(exFormulasOrIndexingOrderEstablished, STD_VC_LAYOUT);
        cp8V.add(exCalculationPlannedAmountFVIdsContainer);
        cp8.add(cp8V, cpMargin);

        investments.getTreeGrid().addViewReadyHandler(viewReadyEvent -> {
            investments.getTreeGrid().setExpanded(investments.getTreeStore().getChild(0), true);
            if (investments.getTreeStore().getAll().stream()
                    .anyMatch(planFactYear -> planFactYear.getPlan() != null && planFactYear.getPlan() != 0
                            || planFactYear.getFact() != null && planFactYear.getFact() != 0))
                cp8.expand();
        });

        compensMethodOfExecuteObligation.getGrid().addViewReadyHandler(viewReadyEvent -> {
            if (isObligationExecutingOnOperationPhase.getValue() != null && isObligationExecutingOnOperationPhase.getValue())
                cp7.expand();
        });

//        cp8V.add(createHtml("Объем инвестиций на стадии эксплуатации"));
//        cp8V.add(investments, STD_VC_LAYOUT);

        if (showControl("otherForm", formId, initId)) {
            cp2Show = false;
            cp3Show = false;
            cp4Show = false;
            cp5Show = false;
            cp6Show = false;
            cp7Show = false;
            cp8Show = false;
        }

        AccordionLayoutContainer accordion = new AccordionLayoutContainer();
        accordion.setExpandMode(AccordionLayoutContainer.ExpandMode.MULTI);
        accordion.add(cp1);
        accordion.add(cp8);
        accordion.add(cp2);
        accordion.add(cp7);
        accordion.add(cp3);
        accordion.add(cp4);
        accordion.add(cp5);
        accordion.add(cp6);

        accordion.setActiveWidget(cp1);
        if (irSource.getValue() == null)
            cp2.collapse();
        cp3.collapse();
        cp4.collapse();
        cp5.collapse();
        cp6.collapse();
        cp7.collapse();
        cp8.collapse();

        container.add(accordion, STD_VC_LAYOUT);

        if (isConcessionPaymentProvided.getValue()) {
            paymentMethodLabel.show();
            payments.toggle(true);
            container.forceLayout();
        } else {
            paymentMethodLabel.hide();
            payments.toggle(false);
        }

        if (!cp2Show)
            cp2.hide();

        if (!cp3Show)
            cp3.hide();

        if (!cp4Show)
            cp4.hide();

        if (!cp5Show)
            cp5.hide();

        if (!cp6Show)
            cp6.hide();

        if (!cp7Show)
            cp7.hide();

        if (!cp8Show)
            cp8.hide();

        isConcessionPaymentProvided.addValueChangeHandler(new ValueChangeHandler<Boolean>() {
            @Override
            public void onValueChange(ValueChangeEvent<Boolean> event) {
                if (event.getValue() != null && event.getValue()) {
                    paymentMethodLabel.show();
                    payments.toggle(true);
                    container.forceLayout();

                } else {
                    paymentMethodLabel.hide();
                    paymentMethod.setValue(null);
                    payments.toggle(false);
                    payments.getTreeStore().clear();
                    payments.setUpBaseIndicators();
                }
            }
        });

        isRenewableBankGuarantee.addValueChangeHandler(new ValueChangeHandler<Boolean>() {
            @Override
            public void onValueChange(ValueChangeEvent<Boolean> event) {
                if (!compensMethodOfExecuteObligation.containsMethod(2L)) {
                    isRenewableBankGuarantee.setValue(null);
                }
            }
        });

        isGuaranteeVariesByYear.addValueChangeHandler(new ValueChangeHandler<Boolean>() {
            @Override
            public void onValueChange(ValueChangeEvent<Boolean> event) {
                if (event.getValue() != null && event.getValue()) {
                    bankGuaranteeByYears.toggle(true);
                    container.forceLayout();
                } else {
                    bankGuaranteeByYears.toggle(false);
                    bankGuaranteeByYears.getTreeStore().clear();
                    bankGuaranteeByYears.setUpBaseIndicators();
                }
            }
        });

        isObligationExecutingOnOperationPhase.addValueChangeHandler(new ValueChangeHandler<Boolean>() {
            @Override
            public void onValueChange(ValueChangeEvent<Boolean> event) {
                if (event.getValue() != null && event.getValue()) {
                    compensMethodOfExecuteObligation.toggle(true);
                    isRenewableBankGuarantee.show();
                    isGuaranteeVariesByYear.show();
                    container.forceLayout();
                } else {
                    compensMethodOfExecuteObligation.toggle(false);
                    isRenewableBankGuarantee.hide();
                    isGuaranteeVariesByYear.hide();
                    bankGuaranteeByYears.toggle(false);

                    compensMethodOfExecuteObligation.getGrid().getStore().clear();
                    isRenewableBankGuarantee.setValue(null);
                    isGuaranteeVariesByYear.setValue(null);
                    bankGuaranteeByYears.getTreeStore().clear();
                    bankGuaranteeByYears.setUpBaseIndicators();
                }
            }
        });
    }

    @Override
    public Widget asWidget() {
        return container;
    }

    /**
     * Обновить форму (скрыть + очистить/показать поля) в зависимости от формы реализации проекта
     * и способа инициации проекта.
     *
     * @param formId - форма реализации проекта
     * @param initId - способ инициации проекта
     */
    public void update(Long formId, Long initId) {
        initWidget(formId, initId);

        if (isObligationExecutingOnOperationPhase.getValue() != null && !isObligationExecutingOnOperationPhase.getValue()) {
            compensMethodOfExecuteObligation.toggle(false);
            isRenewableBankGuarantee.hide();
            isGuaranteeVariesByYear.hide();
            bankGuaranteeByYears.toggle(false);
        } else {
            compensMethodOfExecuteObligation.toggle(true);
            isRenewableBankGuarantee.show();
            isGuaranteeVariesByYear.show();
            bankGuaranteeByYears.toggle(true);
            container.forceLayout();
        }

        if (exFormulasOrIndexingOrderEstablished.getValue() != null && exFormulasOrIndexingOrderEstablished.getValue()) {
            exCalculationPlannedAmountFVIdsContainer.show();
            container.forceLayout();
        } else {
            exCalculationPlannedAmountFVIdsContainer.hide();
        }
    }

    private Map<String, Object> attrKey(Long formId, Long initId) {
        Map<String, Object> key = new HashMap<>();
        key.put("formId", formId);
        key.put("initId", initId);

        return key;
    }

    Map<Map<String, Object>, List<Long>> getFormAttrHideMap(List<Integer> exceptions) {
        Map<Map<String, Object>, List<Long>> resultMap = new HashMap<>();
        if (exceptions != null && !exceptions.isEmpty()) {
            exceptions.forEach(o -> resultMap.put(attrKey(o.longValue(), null), null));
        }

        return resultMap;
    }

    private boolean showControl(String widgetName, Long formId, Long initId) {
        GWT.log("...showControl..." + widgetName + "..." + formId + "..." + initId);
        Map<Map<String, Object>, List<Long>> hideMap = attrHideMap.get(widgetName);
        return (!(hideMap != null && hideMap.containsKey(attrKey(formId, null))));
    }

    private void fillAttrHideMap() {
        Map<Map<String, Object>, List<Long>> except_all = getFormAttrHideMap(Arrays.asList(101, 151, 201, 251, 301, 351, 401, 451, 501, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> all_except_601 = getFormAttrHideMap(Arrays.asList(101, 151, 201, 251, 301, 351, 401, 451, 501, 551, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> except_251_451_501 = getFormAttrHideMap(Arrays.asList(251, 451, 501));
        Map<Map<String, Object>, List<Long>> except_451_501 = getFormAttrHideMap(Arrays.asList(451, 501));
        Map<Map<String, Object>, List<Long>> except_251_401_451_501_551 = getFormAttrHideMap(Arrays.asList(251, 401, 451, 501, 551));
        Map<Map<String, Object>, List<Long>> except_151_201_251_301_401_451_501_551_601 = getFormAttrHideMap(Arrays.asList(151, 201, 251, 301, 401, 451, 501, 551, 601));
        Map<Map<String, Object>, List<Long>> all_except_401 = getFormAttrHideMap(Arrays.asList(101, 151, 201, 251, 301, 351, 451, 501, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> except_251_351_4_451_501_551_601 = getFormAttrHideMap(Arrays.asList(251, 351, 451, 501, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> except_251_301_351_4_451_501_551_601 = getFormAttrHideMap(Arrays.asList(251, 301, 351, 451, 501, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> except_101_251_301_351_401_4_451_501_551_601 = getFormAttrHideMap(Arrays.asList(101, 251, 301, 351, 401, 451, 501, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> all_except_451 = getFormAttrHideMap(Arrays.asList(101, 151, 201, 251, 301, 351, 401, 501, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> all_except_501 = getFormAttrHideMap(Arrays.asList(101, 151, 201, 251, 301, 351, 401, 451, 551, 601, 4, 701, 751));
        Map<Map<String, Object>, List<Long>> except_101_151 = getFormAttrHideMap(Arrays.asList(101, 151));

        //attrHideMap.put("lastObjectActFileUpload", except_251_451_501);

        attrHideMap.put("exPublicShareExpl", all_except_601);
        attrHideMap.put("exHasPublicShareExpl", all_except_601);

        attrHideMap.put("investments", except_251_451_501);

        attrHideMap.put("isInvestmentRecoveryProvided", except_251_451_501);
        attrHideMap.put("investmentsRecovery", except_451_501);
        attrHideMap.put("exFinModelFVIds", except_451_501);

        attrHideMap.put("irSource", except_251_401_451_501_551);
        attrHideMap.put("otherForm", except_101_151);
        attrHideMap.put("irBudgetLevel", except_151_201_251_301_401_451_501_551_601);

        attrHideMap.put("costRecoveryMethod", all_except_401);
        attrHideMap.put("exCostRecoveryMechanism", all_except_401);
        attrHideMap.put("exSupportDocFVIds", all_except_401);
        attrHideMap.put("compensations", all_except_401);
        attrHideMap.put("exSupportCompensDocFVIds", all_except_401);

        attrHideMap.put("isObligationExecutingOnOperationPhase", except_251_351_4_451_501_551_601);
        attrHideMap.put("compensMethodOfExecuteObligation", except_251_351_4_451_501_551_601);
        attrHideMap.put("isRenewableBankGuarantee", except_251_351_4_451_501_551_601);

        attrHideMap.put("isConcessionPaymentProvided", except_251_351_4_451_501_551_601);
        attrHideMap.put("isGuaranteeVariesByYear", except_251_351_4_451_501_551_601);

        attrHideMap.put("bankGuaranteeByYears", except_251_351_4_451_501_551_601);


        attrHideMap.put("isConcessionPaymentProvided", except_251_301_351_4_451_501_551_601);
        attrHideMap.put("paymentMethod", except_251_301_351_4_451_501_551_601);
        attrHideMap.put("payments", except_251_301_351_4_451_501_551_601);

        attrHideMap.put("exOwnPrivateDateRow", except_101_251_301_351_401_4_451_501_551_601);
        attrHideMap.put("exOwnPublicDateRow", except_101_251_301_351_401_4_451_501_551_601);
        attrHideMap.put("exAgreementFVIds", except_101_251_301_351_401_4_451_501_551_601);
        attrHideMap.put("exAcceptActFVIds", except_101_251_301_351_401_4_451_501_551_601);

        attrHideMap.put("exAchEconPlanDateRow", all_except_451);
        attrHideMap.put("exAchEconFactDateRow", all_except_451);
        attrHideMap.put("exAcceptActAAMFVIds", all_except_451);

        attrHideMap.put("exInvestStageDateRow", all_except_501);
    }

    public void setLastObjectPlanDateHeader(Boolean otherForm) {
        if (otherForm) {
            lastObjectPlanDateLabel.setContent("Плановая дата завершения создания/реконструкции объекта соглашения");
        } else {
            lastObjectPlanDateLabel.setContent("Плановая дата завершения создания/реконструкции объекта соглашения (последнего объекта соглашения)");
        }
    }

    public void setLastObjectActFileUploadHeader(Boolean otherForm) {
        if (otherForm) {
            lastObjectActFileUpload.setHeadingText(new SafeHtmlBuilder().appendHtmlConstant("Обосновывающие документы " +
                    "<i class='fa fa-info-circle' aria-hidden='true' style='cursor: pointer'" +
                    "title='Прикладывается подписанный экземпляр документа с реквизитами (например: акт ввода объекта в эксплуатацию)'></i>").toSafeHtml());
        } else {
            lastObjectActFileUpload.setHeadingText(new SafeHtmlBuilder().appendHtmlConstant("Обосновывающие документы (акт ввода в эксплуатацию) " +
                    "<i class='fa fa-info-circle' aria-hidden='true' style='cursor: pointer'" +
                    "title='Прикладывается подписанный экземпляр документа с реквизитами (например: акт ввода объекта в эксплуатацию)'></i>").toSafeHtml());
        }
    }
}
